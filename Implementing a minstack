//Write a program for implementing A MINSTACK Which should support operations like PUSH,POP,OVERFLOW,UNDERFLOW & DISPLAY.
#include <iostream>
#include <vector>
#include <climits>

#define MAX 5

class MinStack {
private:
    std::vector<int> stack;
    std::vector<int> min_stack;

public:
    MinStack() {
        stack.reserve(MAX);
        min_stack.reserve(MAX);
    }

    bool isFull() {
        return stack.size() == MAX;
    }

    bool isEmpty() {
        return stack.empty();
    }

    void push(int value) {
        if (isFull()) {
            std::cout << "Overflow: stack is full, cannot push element\n";
            return;
        }
        stack.push_back(value);
        if (min_stack.empty() || value < min_stack.back()) {
            min_stack.push_back(value);
        } else {
            min_stack.push_back(min_stack.back());
        }
    }

    int pop() {
        if (isEmpty()) {
            std::cout << "Underflow: stack is empty, cannot pop element\n";
            return INT_MIN;
        }
        int popped_value = stack.back();
        stack.pop_back();
        min_stack.pop_back();
        return popped_value;
    }

    int top() {
        if (isEmpty()) {
            std::cout << "Underflow: stack is empty, no top element\n";
            return INT_MIN;
        }
        return stack.back();
    }

    int getMin() {
        if (isEmpty()) {
            std::cout << "Underflow: stack is empty, no minimum element\n";
            return INT_MIN;
        }
        return min_stack.back();
    }

    void display() {
        if (isEmpty()) {
            std::cout << "Stack is empty\n";
            return;
        }
        std::cout << "Stack elements: ";
        for (int elem : stack) {
            std::cout << elem << " ";
        }
        std::cout << "\nMinimum element so far: " << getMin() << std::endl;
    }
};

int main() {
    MinStack minstack;
    minstack.push(10);
    minstack.push(20);
    minstack.push(5);
    minstack.push(30);
    minstack.display();
    std::cout << "Popped: " << minstack.pop() << std::endl;
    minstack.display();
    std::cout << "Top element: " << minstack.top() << std::endl;
    std::cout << "Minimum element: " << minstack.getMin() << std::endl;
    minstack.pop();
    minstack.pop();
    minstack.pop();
    minstack.pop();

    return 0;
}


