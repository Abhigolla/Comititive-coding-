#include <stdio.h>
#include <stdlib.h>

#define SIZE 5

typedef struct {
    int front, rear;
    int items[SIZE];
} CircularQueue;

int isFull(CircularQueue* q) {
    return ((q->front == q->rear + 1) || (q->front == 0 && q->rear == SIZE - 1));
}

int isEmpty(CircularQueue* q) {
    return (q->front == -1);
}

void enqueue(CircularQueue* q, int element) {
    if (isFull(q)) {
        printf("\nQueue is full!\n");
    } else {
        if (q->front == -1) q->front = 0;
        q->rear = (q->rear + 1) % SIZE;
        q->items[q->rear] = element;
        printf("\nInserted -> %d\n", element);
    }
}

int dequeue(CircularQueue* q) {
    int element;
    if (isEmpty(q)) {
        printf("\nQueue is empty!\n");
        return -1;
    } else {
        element = q->items[q->front];
        if (q->front == q->rear) {
            q->front = -1;
            q->rear = -1;
        } else {
            q->front = (q->front + 1) % SIZE;
        }
        printf("\nDeleted -> %d\n", element);
        return element;
    }
}

void display(CircularQueue* q) {
    int i;
    if (isEmpty(q)) {
        printf("\nQueue is empty!\n");
    } else {
        printf("\nFront -> %d", q->front);
        printf("\nItems -> ");
        for (i = q->front; i != q->rear; i = (i + 1) % SIZE)
            printf("%d ", q->items[i]);
        printf("%d ", q->items[i]);
        printf("\nRear -> %d\n", q->rear);
    }
}

int main() {
    CircularQueue q;
    q.front = q.rear = -1;
    dequeue(&q);
    enqueue(&q, 1);
    enqueue(&q, 2);
    enqueue(&q, 3);
    enqueue(&q, 4);
    enqueue(&q, 5);
    enqueue(&q, 6);
    display(&q);
    dequeue(&q);
    dequeue(&q);
    display(&q);
    enqueue(&q, 7);
    enqueue(&q, 8);
    enqueue(&q, 9);
    display(&q);
    return 0;
}
