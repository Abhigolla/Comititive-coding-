#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>


typedef struct {
    int top;
    unsigned capacity;
    int* array;
} Stack;


Stack* createStack(unsigned capacity) {
    Stack* stack = (Stack*) malloc(sizeof(Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (int*) malloc(stack->capacity * sizeof(int));
    return stack;
}


int isFull(Stack* stack) {
    return stack->top == stack->capacity - 1;
}


int isEmpty(Stack* stack) {
    return stack->top == -1;
}


void push(Stack* stack, int item) {
    if (isFull(stack))
        return;
    stack->array[++stack->top] = item;
}


int pop(Stack* stack) {
    if (isEmpty(stack))
        return -1;
    return stack->array[stack->top--];
}


int peek(Stack* stack) {
    if (isEmpty(stack))
        return -1;
    return stack->array[stack->top];
}


int isOperand(char ch) {
    return (ch >= '0' && ch <= '9');
}


int precedence(char op) {
    switch (op) {
    case '+':
    case '-':
        return 1;
    case '*':
    case '/':
        return 2;
    }
    return 0;
}


int applyOp(int a, int b, char op) {
    switch (op) {
    case '+':
        return a + b;
    case '-':
        return a - b;
    case '*':
        return a * b;
    case '/':
        if (b == 0) {
            printf("Division by zero error!\n");
            exit(EXIT_FAILURE);
        }
        return a / b;
    }
    return 0;
}


int evaluate(char* expression) {
    int i;
    
   
    Stack* values = createStack(strlen(expression));
    
   
    Stack* ops = createStack(strlen(expression));
    
    for (i = 0; i < strlen(expression); i++) {
        
      
        if (expression[i] == ' ')
            continue;
        
      
        else if (expression[i] == '(') {
            push(ops, expression[i]);
        }
        
        
        else if (isOperand(expression[i])) {
            int val = 0;
            
           
            while (i < strlen(expression) && isOperand(expression[i])) {
                val = (val * 10) + (expression[i] - '0');
                i++;
            }
            
            push(values, val);
            i--;
        }
        
       
        else if (expression[i] == ')') {
            while (!isEmpty(ops) && peek(ops) != '(') {
                int val2 = pop(values);
                
                int val1 = pop(values);
                
                char op = pop(ops);
                
                push(values, applyOp(val1, val2, op));
            }
            
        
            if (!isEmpty(ops))
                pop(ops);
        }
        
      
        else {
            
            while (!isEmpty(ops) && precedence(peek(ops)) >= precedence(expression[i])) {
                int val2 = pop(values);
                
                int val1 = pop(values);
                
                char op = pop(ops);
                
                push(values, applyOp(val1, val2, op));
            }
            
          
            push(ops, expression[i]);
        }
    }
    
  
    while (!isEmpty(ops)) {
        int val2 = pop(values);
        
        int val1 = pop(values);
        
        char op = pop(ops);
        
        push(values, applyOp(val1, val2, op));
    }
    

    return pop(values);
}

int main() {
    char expression[] = "10 + 2 * 6";
    printf("Value of %s is %d\n", expression, evaluate(expression));
    
    strcpy(expression, "100 * ( 2 + 12 ) / 14");
    printf("Value of %s is %d\n", expression, evaluate(expression));
    
    return 0;
}
